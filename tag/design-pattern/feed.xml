<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://localhost:4000/tag/design-pattern/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2020-09-17T23:58:42+09:00</updated>
  <id>http://localhost:4000/tag/design-pattern/feed.xml</id>

  
  
  

  
    <title type="html">changjunpyo | </title>
  

  
    <subtitle>배운 것들을 정리하는 곳</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">디자인패턴(2)-옵저버 패턴</title>
      <link href="http://localhost:4000/obserber" rel="alternate" type="text/html" title="디자인패턴(2)-옵저버 패턴" />
      <published>2020-05-24T00:00:00+09:00</published>
      <updated>2020-05-24T00:00:00+09:00</updated>
      <id>http://localhost:4000/obserber</id>
      <content type="html" xml:base="http://localhost:4000/obserber">&lt;h2 id=&quot;observer-&quot;&gt;옵저버(Observer) 패턴&lt;/h2&gt;
&lt;p&gt;옵저버 패턴은 디자인 패턴 중 행동 패턴에 속하며, 행동 패턴이란 어떤 처리의 책임을 어느 객체에 할당하는 것이 좋은지, 알고리즘을 어느 객체에 정의 하는 것이 좋은 지 등을 다루는 패턴들이다.&lt;/p&gt;
&lt;h4 id=&quot;section&quot;&gt;목적&lt;/h4&gt;
&lt;p&gt;객체 사이에 일 대 다의 의존 관계를 정의해 두어, 어떤 객체의 상태가 변할 때 그 객체에 의존성을 가진 다른 객체들이 그변화를 통지받고 자동으로 갱신될 수 있게 만든다라고 책에 정의 되어있다.
간단히 말하자면 1개의 객체에 다른 객체들이 구독(subcribe)를 하고 그 객체에 변화가 생기게 되면 다른 그 상태를 listen하고 있는 다른 여러 객체들을 갱신 해주는 것이다.&lt;/p&gt;
&lt;h4 id=&quot;section-1&quot;&gt;필요성&lt;/h4&gt;
&lt;p&gt;어떤 하나의 시스템을 서로 연동되는 여러 개의 클래스로 만들게 되는 경우 발생하게 되는 문제 중 하나는 서로간의 일관성(consistency)을 맞추어 주어야한다는 것이다. 그렇지만 이렇게 일관성을 유지하기 위해서 객체간의 결합을 높이자니 SRP(단일 책임 원칙)를 해치게 되는 문제가 생긴다. 그렇게 된다면 각각의 클래스의 재사용성이 떨어지기 때문이다.
우리는 상태가 변화하는 객체를 주체(subject)라고 부르고 주체의 상태를 감시하는 객체를 감시자(Observer)라고 부른다.&lt;/p&gt;
&lt;p&gt;이것을 사용하는 예로는 우리는 Redux에서 Store(주체)와 그것들의 상태를 연결한 각각의 컴포넌트들(감시자)라고 생각할 수 있다. store에 있는 특정 state가 변화하게 된다면 그 상태에 대한 정보를 구독하고 있는 컴포넌트의 경우는 그 값이 변화하여서 새로운 값을 받게 된다.&lt;/p&gt;
&lt;h4 id=&quot;section-2&quot;&gt;언제 써야하나?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;어떤 추상 개념이 두 가지 양상을 갖고 하나가 다른 하나에 종속적일 때. 각 양상을 별도의 객체로 캡슐화하여 이들 각각을 재사용 할 수 있을 때&lt;/li&gt;
&lt;li&gt;한 객체에 가해진 변경으로 다른 객체를 변경해야 하고, 프로그래머들은 얼마나 많은 객체들이 변경되어야 하는지 몰라도 될 때&lt;/li&gt;
&lt;li&gt;어떤 객체가 다른 객체에 자신의 변화를 통보할 수 있는데, 그 변화에 관심 있어 하는 객체들이 누구인지에 대한 가정 없이도 그러한 통보가 될 때&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;reference&quot;&gt;reference&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://jeong-pro.tistory.com/86&quot;&gt;https://jeong-pro.tistory.com/86&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;'GOF의 디자인 패턴'&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Junpyo</name>
        
        
      </author>

      

      
        <category term="design pattern" />
      

      
        <summary type="html">옵저버(Observer) 패턴</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">디자인패턴(1)-싱글톤 패턴</title>
      <link href="http://localhost:4000/singleton" rel="alternate" type="text/html" title="디자인패턴(1)-싱글톤 패턴" />
      <published>2020-05-17T00:00:00+09:00</published>
      <updated>2020-05-17T00:00:00+09:00</updated>
      <id>http://localhost:4000/singleton</id>
      <content type="html" xml:base="http://localhost:4000/singleton">&lt;h2 id=&quot;singleton-&quot;&gt;단일체(Singleton) 패턴&lt;/h2&gt;
&lt;p&gt;디자인 패턴에 대해서 차례대로 공부해보려고 한다. 일단 생성 패턴, 구조 패턴 , 행동 패턴으로 나눠서 익힐 수도 있지만 실제로 많이 접해보고 우선적으로 익혀야 하는 것들을 골라서 먼저 진행하려고 한다. 그중 많이 들어봤을 &lt;strong&gt;&lt;em&gt;싱글톤 패턴&lt;/em&gt;&lt;/strong&gt; 부터 소개한다.&lt;/p&gt;
&lt;h4 id=&quot;section&quot;&gt;목적&lt;/h4&gt;
&lt;p&gt;오직 &lt;strong&gt;&lt;em&gt;한 개의 클래스 인스턴스&lt;/em&gt;&lt;/strong&gt; 만을 갖도록 보장하고, 이에 대한 전역적인 접근점을 제공함&lt;/p&gt;
&lt;h4 id=&quot;section-1&quot;&gt;필요성&lt;/h4&gt;
&lt;p&gt;특정한 클래스의 경우는 정확히 하나의 인스턴스를 갖도록 하는 것이 좋다. 예를 들면 파일 시스템이라던지, 윈도우 관리자라 던지 하는 것들은 하나만 존재해야 한다. DBCP(DataBase Connection pool)과 같이 공통된 객체를 여러개 생성해서 사용해야 하는 경우 단일체 패턴을 이용하게 된다면 다른 인스턴스들과 데이터를 공유하기 쉽다.&lt;/p&gt;
&lt;p&gt;전역 변수를 통하여서 이객체만 접근하도록 하는 방법을 사용한다면 여러개의 인스턴스를 만들 필요가 없다. 하지만 이것보다 더 좋은 방법은 클래스가 자신이 자기의 유일한 인스턴스로 접근하는 방법을 자체적으로 관리하도록 하는 것이다. 이 클래스는 다른 인스턴스가 생성되지 않도록 하며(새로운 객체 생성 요청을 가로채서 원래 인스턴스를 주는 방식으로), 클래스 자신이 그 인스턴스에 대한 접근 방법을 제공한다. 이것을 가리켜 &lt;strong&gt;&lt;em&gt;단일체(Singleton) 패턴&lt;/em&gt;&lt;/strong&gt; 이라고 한다.&lt;/p&gt;
&lt;h4 id=&quot;section-2&quot;&gt;언제 써야하나?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인스턴스가 하나임을 보장하고, 그것을 사용하는 방법을 하나로 만들어야 할 때&lt;/li&gt;
&lt;li&gt;유일한 인스턴스가 서브 클래스로 확장되어야 하며, 소스의 수정없이 확장된 서브클래스를 이용하고자 할 때&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;section-3&quot;&gt;문제점&lt;/h4&gt;
&lt;p&gt;일단 싱글톤의 경우는 기본적으로 전역 변수와 같이 전역적인 특성을 가지고 있게 된다. 따라서 다른 객체와 공통으로 사용하는 경우와 같은 여러 케이스가 아닌 경우는 문제가 생길 수 있다. 싱글톤이 만약 다양한 역할을 가지고 복잡한 일을 하게 되는 경우 다른 객체와의 결합도가 높아져 OOP의 원칙중 OCP(개방 폐쇄 원칙)을 위반하는 것이 된다.&lt;/p&gt;
&lt;h4 id=&quot;section-4&quot;&gt;구현&lt;/h4&gt;
&lt;p&gt;java의 경우는 여러가지의 구현 방식이 존재 하며 그것마다 각각의 특징을 가지고 있다.&lt;/p&gt;
&lt;h5 id=&quot;static&quot;&gt;Static&lt;/h5&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// static instance&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// construct를 private&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Create instance fail&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 사용하게 되면 클래스가 사용되는 시점이 아닌 클래스를 로딩하는 시점에 생성을 하게 된다.&lt;/p&gt;
&lt;h5 id=&quot;lazy-init&quot;&gt;Lazy init&lt;/h5&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 방법을 개선하여 클래스가 사용되는 시점에 인스턴스를 생성하게 된다. 하지만 멀티스레딩을 사용하는 경우 취약한 환경이 된다.&lt;/p&gt;
&lt;h5 id=&quot;lazy-init--thread-safe&quot;&gt;Lazy init + Thread safe&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;```java

    public class Singleton{

      private static Singleton instance;

      private Singleton(){}

      public static synchronized Singleton getInstance(){
        if (instance == null) {instance = new Singleton();}
        return instance;
      }
    }

```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;멀티 스레딩 환경에서도 쓰레드 세이프한 방법을 통해 구현 하였다. 하지만 synchronized의 경우는 성능을 많이 저하시키게 된다.&lt;/p&gt;
&lt;h5 id=&quot;holder&quot;&gt;Holder&lt;/h5&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SingletonHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SingletonHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;JVM의 클래스 로더 메커니즘과 클래스의 로드 시점을 이용하여 내부 클래스를 통해 생성 시킴으로써 쓰레드 간의 동기화 문제를 해결한다. holder안에 선언된 instance는 클래스 로드시 한번만 선언되어 생성 될 것이고 final을 이용하여 변경되지 않게 해준다.&lt;/p&gt;
&lt;h3 id=&quot;reference&quot;&gt;reference&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://jeong-pro.tistory.com/86&quot;&gt;https://jeong-pro.tistory.com/86&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;'GOF의 디자인 패턴'&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Junpyo</name>
        
        
      </author>

      

      
        <category term="design pattern" />
      

      
        <summary type="html">단일체(Singleton) 패턴</summary>
      

      
      
    </entry>
  
</feed>
